import Head from "next/head";
import { useState, useEffect } from "react";
import { ethers } from "ethers";

const WEEKONE_CONTRACT = require("../contracts/BullnBear.json");
const CONTRACT_ADDRESS = "0xcdb7ae9026f937ba5d5c4287e647ee050fa796c3";

export default function Home() {
  const [walletAddress, setWalletAddress] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [mintedTokenId, setMintedTokenId] = useState(null);
  const [errorMessage, setErrorMessage] = useState(null);

  useEffect(() => {
    checkIfWalletIsConnected();
    walletChangeListener();
  }, []);

  const checkIfWalletIsConnected = async () => {
    try {
      if (window.ethereum) {
        const { ethereum } = window;

        const accounts = await ethereum.request({
          method: "eth_accounts",
        });

        if (accounts.length > 0) {
          setWalletAddress(accounts[0]);
          ensureOnNetwork();
        }
      }
    } catch (err) {
      console.error("Please install metamask");
    }
  };

  const connectWallet = async () => {
    try {
      if (window.ethereum) {
        const { ethereum } = window;

        const accounts = await ethereum.request({
          method: "eth_requestAccounts",
        });

        if (accounts.length > 0) {
          setWalletAddress(accounts[0]);
          ensureOnNetwork();
        } else {
          alert("No address found");
        }
      }
    } catch (err) {
      console.error(err);
    }
  };

  const walletChangeListener = async () => {
    try {
      const { ethereum } = window;

      if (ethereum) {
        ethereum.on("accountsChanged", async (accounts) => {
          if (accounts.length === 0) {
            // Disconnected
            setWalletAddress(null);
          } else {
            setWalletAddress(accounts[0]);
            ensureOnNetwork();
          }
        });
      }
    } catch (err) {}
  };

  const ensureOnNetwork = async () => {
    try {
      const { ethereum } = window;

      const provider = new ethers.providers.Web3Provider(ethereum);
      const { chainId } = await provider.getNetwork();
      console.log(`chainId: ${chainId}`);

      if (chainId !== 4) {
        await ethereum.request({
          method: "wallet_switchEthereumChain",
          params: [
            {
              chainId: `0x${Number(4).toString(16)}`,
            },
          ],
        });
      }
    } catch (err) {
      console.error(err);
    }
  };

  const mint = async () => {
    setIsLoading(true);

    try {
      const { ethereum } = window;

      const provider = new ethers.providers.Web3Provider(ethereum);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(CONTRACT_ADDRESS, WEEKONE_CONTRACT.abi, signer);

      const tx = await contract.safeMint(walletAddress);
      const receipt = await tx.wait();
      console.log(receipt);

      setMintedTokenId(receipt.events[0].args.tokenId.toNumber());
    } catch (err) {
      console.error(err);
      setErrorMessage(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const loadingIcon = () => (
    <svg
      className="animate-spin -mt-1 h-6 w-6 text-white inline-block"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  );

  return (
    <div className="bg-neutral-100">
      <Head>
        <title>Road to Web3 - Week 5</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="max-w-5xl mx-auto px-8 py-24 md:p-20">
        <a
          target="_blank"
          rel="noreferrer"
          href="https://twitter.com/stevenkin"
          className="mt-4 md:mt-0 bg-slate-800 text-slate-300 rounded-full text-sm self-start py-2 px-4 hover:bg-slate-700 inline-block absolute right-4 top-4"
        >
          Follow me @stevenkin
        </a>
        <h1 className="text-5xl font-bold text-center">Road to Web3 - Week 5</h1>
        <p className="text-center mt-4 text-lg max-w-xl mx-auto text-neutral-500">
          This is a practice project to learn ethers.js and solidity. The fifth week is to develop a dynamic NFT smart
          contract which will change based on the price of ETH/USD, using{" "}
          <span className="bg-white font-mono inline-block px-1 rounded ring-1 ring-neutral-200">
            Chainlink VRF and Keeper
          </span>
          .
          <br />
          <a
            href="https://docs.alchemy.com/alchemy/road-to-web3/weekly-learning-challenges/5.-connect-apis-to-your-smart-contracts-using-chainlink"
            target="_blank"
            rel="noreferrer"
            className="inline-block bg-neutral-300 rounded-md text-neutral-600 mt-4 p-1 px-2 hover:bg-neutral-200"
          >
            ‚û°Ô∏è Amazing tutorial here
          </a>
        </p>

        <img
          src="/images/NFT.gif"
          alt="Road to Web3"
          className="mt-12 w-full max-w-md block mx-auto rounded-lg ring-4 shadow-lg ring-white"
        />

        <div className="text-center mt-12">
          {!walletAddress && (
            <button
              className="py-2 px-5 bg-black hover:bg-neutral-800 rounded-md text-white text-xl"
              onClick={connectWallet}
            >
              Connect Wallet
            </button>
          )}

          {walletAddress && (
            <div className="flex flex-col items-center">
              <button
                className="py-2 px-5 bg-black hover:bg-neutral-800 rounded-md text-white text-xl"
                onClick={mint}
                disabled={isLoading}
              >
                {isLoading ? loadingIcon() : "Mint üî•"}
              </button>

              {<p className="text-red-600 mt-4">{errorMessage}</p>}

              {mintedTokenId && (
                <a
                  className="py-2 px-5 bg-purple-700 hover:bg-purple-800 rounded-md mt-4 text-white text-md"
                  onClick={mint}
                  disabled={isLoading}
                  href={`https://testnets.opensea.io/assets/rinkeby/${CONTRACT_ADDRESS}/${mintedTokenId}`}
                  target="_blank"
                  rel="noreferrer"
                >
                  View on OpenSea (Testnet)
                </a>
              )}

              <p className="text-neutral-400 mt-3 text-sm max-w-xl">
                The NFT will be updated every hour based on the ETH/USD price change, remember to hit{" "}
                <strong>Refresh metadata</strong> on OpenSea
              </p>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}
